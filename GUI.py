
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog
from PIL import Image, ImageTk
from model_test import predict_single_image
from keras.models import load_model
from lime_integration import explain_image
import matplotlib.pyplot as plt
import numpy as np

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1920x1080")
window.configure(bg = "#2A2A2A")


canvas = Canvas(
    window,
    bg = "#2A2A2A",
    height = 1080,
    width = 1920,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)

# GREY BACKGROUND SQUARE 1
image_image_14 = PhotoImage(
    file=relative_to_assets("GreyDecorSq1.png"))
image_14 = canvas.create_image(
    1550.0,
    750.0,
    image=image_image_14
)

# GREY BACKGROUND SQUARE 2
image_image_15 = PhotoImage(
    file=relative_to_assets("GreyDecorSq2.png"))
image_15 = canvas.create_image(
    1580.0,
    820.0,
    image=image_image_15
)

# WHITE DESCRIPTION BOX
canvas.create_rectangle(
    0.0,
    108.0,
    272.0,
    1123.0,
    fill="#FFFFFF",
    outline="")

# WHAT IS NEURASCAN TEXT
image_image_2 = PhotoImage(
    file=relative_to_assets("What is NeuraScan_.png"))
image_2 = canvas.create_image(
    120.0,
    180.0,
    image=image_image_2
)

# NEURASCAN DESCRIPTION
image_image_1 = PhotoImage(
    file=relative_to_assets("NeuraScan is an advanced deep learning software solution designed to analyze MRI brain scans with the purpose of predicting the severity of Alzheimer's disease present in the scan. Users can conveniently upload JPG.png")
)
image_1 = canvas.create_image(
    130.0,
    600.0,
    image=image_image_1
)

# BLUE HEADER RECTANGLE
canvas.create_rectangle(
    0.0,
    0.0,
    1920.0,
    127.0,
    fill="#00A3FF",
    outline="")

# NEURASCAN LOGO
image_image_4 = PhotoImage(
    file=relative_to_assets("NeuraScan.png"))
image_4 = canvas.create_image(
    350.0,
    65.0,
    image=image_image_4
)

# NEURASCAN SYMBOL
image_image_5 = PhotoImage(
    file=relative_to_assets("Artificial Intelligence.png"))
image_5 = canvas.create_image(
    130.0,
    65.0,
    image=image_image_5
)

# LEFT OUTPUT RECTANGLE
image_image_6 = PhotoImage(
    file=relative_to_assets("OutputRight.png"))
image_6 = canvas.create_image(
    670.0,
    700.0,
    image=image_image_6
)

# RIGHT OUTPUT RECTANGLE
image_image_7 = PhotoImage(
    file=relative_to_assets("OutputRight.png"))
image_7 = canvas.create_image(
    1450.0,
    700.0,
    image=image_image_7
)

# PREDICTION IS TEXT
image_image_3 = PhotoImage(
    file=relative_to_assets("Prediction is_.png"))
image_3 = canvas.create_image(
    510.0,
    375.0,
    image=image_image_3
)

# HEADER DECORATIONS
# BRAIN
image_image_10 = PhotoImage(
    file=relative_to_assets("Brain.png"))
image_10 = canvas.create_image(
    1480.0,
    70.0,
    image=image_image_10
)

# SECOND BRAIN
image_image_11 = PhotoImage(
    file=relative_to_assets("Critical Thinking.png"))
image_11 = canvas.create_image(
    1580.0,
    55.0,
    image=image_image_11
)

# ROBOT
image_image_12 = PhotoImage(
    file=relative_to_assets("Bot.png"))
image_12 = canvas.create_image(
    1680.0,
    65.0,
    image=image_image_12
)

# MACHINE LEARNING
image_image_13 = PhotoImage(
    file=relative_to_assets("Machine Learning.png"))
image_13 = canvas.create_image(
    1800.0,
    70.0,
    image=image_image_13
)
# UPLOAD SCAN BUTTON
image_image_8 = PhotoImage(
    file=relative_to_assets("ScanButton.png"))
image_8 = canvas.create_image(
    1010.0,
    240.0,
    image=image_image_8
)

# SCAN BUTTON HOVER
image_image_16 = PhotoImage(
    file=relative_to_assets("ScanButtonHover.png"))
image_16 = canvas.create_image(
    1010.0,
    240.0,
    image=image_image_16
)


# UPLOAD SCAN TEXT
image_image_9 = PhotoImage(
    file=relative_to_assets("Upload Scan.png"))
image_9  = canvas.create_image(
    1010.0,
    240.0,
    image=image_image_9
)

# ------------FUNCTIONALITY------------#

model = load_model('classificationModel.keras')

def upload_file():
    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg;*.jpeg;*.png")])
    if file_path:
        print("Uploaded file path:", file_path)

        img = Image.open(file_path)
        img = img.resize((128, 128))
        img = np.asarray(img)
        img = img / 255.0

        # CHECK IF IT ALREADY HAS ALL THE DIMS BEFORE DOING THIS
        if img.shape[-1] == 128:
            img = np.expand_dims(img, axis=-1)
        if img.shape[0] == 128:
            img = np.expand_dims(img, axis=0)

        if img.shape[-1] != 3:
            img = np.repeat(img, 3, axis=3)

        prediction, confidence = predict_single_image(model, img)

        if prediction == "MildDemented":
            prediction = "Mild Demented"
        elif prediction == "NonDemented":
            prediction = "Non-Demented"
        elif prediction == "VeryMildDemented":
            prediction = "Very Mild Demented"
        else:
            prediction = "Moderate Demented"

        print(f"Prediction is: {prediction}\nConfidence is: {round(confidence*100, 4)}%")


button_pressed_yet = False
if button_pressed_yet is False:
    canvas.itemconfig(image_8, state='normal')
    canvas.itemconfig(image_16, state='hidden')

def button_pressed(event):
    canvas.itemconfig(image_8, state='hidden')
    canvas.itemconfig(image_16, state='normal')

def button_released(event):
    upload_file()
    canvas.itemconfig(image_8, state='normal')
    canvas.itemconfig(image_16, state='hidden')

invisible_button = Button(window, image=image_image_9, bg="#00A3FF", activebackground="#49BEFF",
                          borderwidth=0, width=710, height=70)

invisible_button.bind("<ButtonPress-1>", button_pressed)
invisible_button.bind("<ButtonRelease-1>", button_released)

# Place the button on the canvas
canvas.create_window(1010.0, 240.0, window=invisible_button)


window.resizable(False, False)
window.mainloop()
