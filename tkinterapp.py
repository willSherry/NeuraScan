from customtkinter import *
import tkinter as tk
from PIL import Image, ImageTk
import numpy as np
import matplotlib.pyplot as plt
import io
from screeninfo import get_monitors
from keras.models import load_model
from model_test import predict_single_image
from lime_integration import explain_image


app = CTk()
monitor = get_monitors()[0]
screen_width = monitor.width
screen_height = monitor.height
app.geometry(f"{screen_width}x{screen_height}")
app.minsize(920, 1080)
app.title("NeuraScan")

bg_image = Image.open("images/wave_background.png")
bg_image = ImageTk.PhotoImage(bg_image)
background_image_label = CTkLabel(app, text=" ")
background_image_label.configure(image=bg_image)
background_image_label.place(x=0, y=0, relwidth=1, relheight=1)

set_appearance_mode("light")

model = load_model("classificationModel.keras")

image_size = (300, 300)

def upload_file():
    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg;*.jpeg;*.png")])
    if file_path:
        print("Uploaded file path:", file_path)

        image = Image.open(file_path)

        image = image.resize(image_size)

        photo = ImageTk.PhotoImage(image)

        uploaded_image_label = CTkLabel(master=app, text=" ")
        uploaded_image_label.place(relx=0.5, rely=0.4, anchor="center")

        uploaded_image_label.configure(image=photo)
        uploaded_image_label.image = photo

        # Preprocessing and making the predicion
        img = Image.open(file_path)
        img = img.resize((128, 128))
        img = np.asarray(img)
        img = img / 255.0

        # CHECK IF IT ALREADY HAS ALL THE DIMS BEFORE DOING THIS
        if img.shape[-1] == 128:
            img = np.expand_dims(img, axis=-1)
        if img.shape[0] == 128:
            img = np.expand_dims(img, axis=0)

        if img.shape[-1] != 3:
            img = np.repeat(img, 3, axis=3)

        prediction, confidence = predict_single_image(model, img)

        if prediction == "MildDemented":
            prediction = "Mild Demented"
        elif prediction == "NonDemented":
            prediction = "Non-Demented"
        elif prediction == "VeryMildDemented":
            prediction = "Very Mild Demented"
        else:
            prediction = "Moderate Demented"

        # Generating the LIME explanation
        heatmap, explained_image = explain_image(img, prediction)
        fig, axes = plt.subplots(1, 2, figsize=(10, 5))

        heatmap_plot = axes[0].imshow(heatmap, cmap='RdBu', vmin=-heatmap.max(), vmax=heatmap.max())
        axes[0].set_title('Heatmap')

        regular_plot = axes[1].imshow(explained_image)
        axes[1].set_title('Explained Image')
        fig.colorbar(heatmap_plot, ax=axes[0])

        for ax in axes:
            ax.set_xticks([])
            ax.set_yticks([])

        fig.suptitle(f"Prediction: {prediction}\nConfidence: {round(confidence*100, 4)}%")

        # Convert the matplotlib figure to a Tkinter-compatible format
        fig_photo = matplotlib_to_tk_photo(fig)

        # Create a label to display the figure
        fig_label = CTkLabel(app, image=fig_photo)
        fig_label.image = fig_photo
        fig_label.place(relx=0.5, rely=0.75, anchor="center")

        # Ensure the figure is closed to prevent memory leaks
        plt.close(fig)

# Function to convert matplotlib figure to Tkinter PhotoImage
def matplotlib_to_tk_photo(fig):
    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    return ImageTk.PhotoImage(Image.open(buf))

btn = CTkButton(master=app, text="Upload Image", bg_color="#00A2FF", fg_color="#FFFFFF", text_color="#000000",
                width=200, height=60, command=upload_file, corner_radius=32, font=("Gill Sans", 24))
btn.place(relx=0.5, rely=0.2, anchor="center")

neurascan_symbol = CTkLabel(master=app, text="NeuraScan", font=("Arial", 36))
neurascan_symbol.place(relx=0.5, rely=0.1, anchor="center")

about_us_label = CTkLabel(master=app, text="NeuraScan is an advanced deep learning software solution designed to analyse \n"
    "MRI brain scans with the purpose of predicting the severity of Alzheimer's disease present in the scan. Users can \n"
    "conveniently upload JPGs or PNGs of their scans, and in return, receive a prediction generated by our hybrid deep learning \n"
    "model. Following the prediction, users are provided with an easy to understand visual explanation, highlighting the specific \nregions "
    "within the scan that influenced the model's decision, thereby enhancing understanding and interpretation of the prediction.",
                          font=("Arial", 26))

about_us_label.place(relx=0.5, rely=0.8, anchor="center")

app.mainloop()